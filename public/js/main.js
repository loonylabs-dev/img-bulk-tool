(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))i(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function s(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerPolicy&&(r.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?r.credentials="include":t.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(t){if(t.ep)return;t.ep=!0;const r=s(t);fetch(t.href,r)}})();var u=Object.defineProperty,h=(n,e,s)=>e in n?u(n,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[e]=s,a=(n,e,s)=>h(n,typeof e!="symbol"?e+"":e,s);class p{constructor(){a(this,"images",[]),a(this,"dropZone"),a(this,"fileInput"),a(this,"imageList"),a(this,"processBtn"),a(this,"progressOverlay"),a(this,"progressFill"),a(this,"progressText"),a(this,"resultsSection"),a(this,"resultsList"),this.dropZone=document.getElementById("dropZone"),this.fileInput=document.getElementById("fileInput"),this.imageList=document.getElementById("imageList"),this.processBtn=document.getElementById("processBtn"),this.progressOverlay=document.getElementById("progressOverlay"),this.progressFill=document.getElementById("progressFill"),this.progressText=document.getElementById("progressText"),this.resultsSection=document.getElementById("results"),this.resultsList=document.getElementById("resultsList"),this.initEventListeners()}initEventListeners(){var e;document.addEventListener("dragenter",t=>t.preventDefault()),document.addEventListener("dragover",t=>t.preventDefault()),document.addEventListener("dragleave",t=>t.preventDefault()),document.addEventListener("drop",t=>t.preventDefault()),this.dropZone.addEventListener("click",()=>this.fileInput.click()),this.dropZone.addEventListener("dragover",this.handleDragOver.bind(this)),this.dropZone.addEventListener("dragleave",this.handleDragLeave.bind(this)),this.dropZone.addEventListener("drop",this.handleDrop.bind(this)),this.fileInput.addEventListener("change",this.handleFileSelect.bind(this)),this.processBtn.addEventListener("click",this.processImages.bind(this)),document.querySelectorAll('input[name="mode"]').forEach(t=>{t.addEventListener("change",this.handleModeChange.bind(this))});const s=document.getElementById("quality"),i=document.getElementById("qualityValue");s.addEventListener("input",()=>{i.textContent=`${s.value}%`}),(e=document.getElementById("downloadAllBtn"))==null||e.addEventListener("click",this.downloadAll.bind(this))}handleDragOver(e){e.preventDefault(),e.stopPropagation(),this.dropZone.classList.add("drag-over")}handleDragLeave(e){e.preventDefault(),e.stopPropagation(),this.dropZone.classList.remove("drag-over")}handleDrop(e){var s;e.preventDefault(),e.stopPropagation(),this.dropZone.classList.remove("drag-over");const i=Array.from(((s=e.dataTransfer)==null?void 0:s.files)||[]);this.addFiles(i)}handleFileSelect(e){const s=e.target,i=Array.from(s.files||[]);this.addFiles(i)}addFiles(e){e.filter(s=>s.type.startsWith("image/")).forEach(s=>{const i=new FileReader;i.onload=t=>{var r;this.images.push({file:s,preview:(r=t.target)==null?void 0:r.result,prefix:""}),this.renderImageList()},i.readAsDataURL(s)})}renderImageList(){if(this.images.length===0){this.imageList.innerHTML="",this.processBtn.disabled=!0;return}this.processBtn.disabled=!1,this.imageList.innerHTML=this.images.map((e,s)=>`
      <div class="image-item" data-index="${s}">
        <img src="${e.preview}" alt="${e.file.name}">
        <div class="image-info">
          <p class="image-name">${e.file.name}</p>
          <p class="image-size">${this.formatFileSize(e.file.size)}</p>
          <input type="text" 
                 class="prefix-input" 
                 placeholder="PrÃ¤fix (optional)" 
                 data-index="${s}"
                 value="${e.prefix}">
        </div>
        <button class="remove-btn" data-index="${s}">Ã—</button>
      </div>
    `).join(""),this.imageList.querySelectorAll(".prefix-input").forEach(e=>{e.addEventListener("input",s=>{const i=s.target,t=parseInt(i.dataset.index);this.images[t].prefix=i.value})}),this.imageList.querySelectorAll(".remove-btn").forEach(e=>{e.addEventListener("click",s=>{const i=s.target,t=parseInt(i.dataset.index);this.images.splice(t,1),this.renderImageList()})})}handleModeChange(){const e=document.querySelector('input[name="mode"]:checked').value,s=document.getElementById("sizeOptions");e==="resize"||e==="split-resize"?s.style.display="block":s.style.display="none"}async processImages(){if(this.images.length===0)return;const e=document.querySelector('input[name="mode"]:checked').value,s=parseInt(document.getElementById("quality").value),i=parseInt(document.getElementById("width").value)||512,t=parseInt(document.getElementById("height").value)||512,r=document.getElementById("globalPrefix").value||"image",o=new FormData,d=[];this.images.forEach((l,c)=>{o.append("images",l.file),d.push({mode:e,quality:s,width:i,height:t,prefix:l.prefix||r})}),o.append("options",JSON.stringify(d)),this.showProgress();try{const l=await fetch("/api/process",{method:"POST",body:o});if(!l.ok)throw new Error("Fehler bei der Verarbeitung");const c=await l.json();this.showResults(c.results)}catch(l){console.error("Fehler:",l),alert("Fehler bei der Bildverarbeitung")}finally{this.hideProgress()}}showProgress(){this.progressOverlay.style.display="flex",this.animateProgress()}animateProgress(){let e=0;const s=setInterval(()=>{e+=Math.random()*15,e>90&&(clearInterval(s),e=90),this.progressFill.style.width=`${e}%`,this.progressText.textContent=`${Math.round(e)}%`},200)}hideProgress(){this.progressFill.style.width="100%",this.progressText.textContent="100%",setTimeout(()=>{this.progressOverlay.style.display="none",this.progressFill.style.width="0%"},500)}showResults(e){this.resultsSection.style.display="block",this.resultsList.innerHTML=e.map(s=>`
      <div class="result-item">
        <h3>${s.original}</h3>
        <p class="size-info">
          Original: ${this.formatFileSize(s.originalSize)} â†’ 
          Komprimiert: ${this.formatFileSize(s.processed.reduce((i,t)=>i+t.size,0))}
          <span class="savings">
            (${this.calculateSavings(s.originalSize,s.processed.reduce((i,t)=>i+t.size,0))}% gespart)
          </span>
        </p>
        <div class="processed-files">
          ${s.processed.map(i=>`
            <div class="processed-file">
              <span class="file-name">${i.filename}</span>
              <span class="file-size">${this.formatFileSize(i.size)}</span>
              <a href="${i.url}" download="${i.filename}" class="download-btn">
                ðŸ“¥ Download
              </a>
            </div>
          `).join("")}
        </div>
      </div>
    `).join(""),this.resultsSection.scrollIntoView({behavior:"smooth"})}async downloadAll(){const e=this.resultsList.querySelectorAll(".download-btn");for(const s of Array.from(e)){const i=s.href,t=s.download,r=await(await fetch(i)).blob(),o=URL.createObjectURL(r),d=document.createElement("a");d.href=o,d.download=t,document.body.appendChild(d),d.click(),document.body.removeChild(d),URL.revokeObjectURL(o),await new Promise(l=>setTimeout(l,100))}}formatFileSize(e){if(e===0)return"0 Bytes";const s=1024,i=["Bytes","KB","MB","GB"],t=Math.floor(Math.log(e)/Math.log(s));return Math.round(e/Math.pow(s,t)*100)/100+" "+i[t]}calculateSavings(e,s){const i=(e-s)/e*100;return Math.round(i)}}document.addEventListener("DOMContentLoaded",()=>{new p});(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const t of i)if(t.type==="childList")for(const r of t.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(i){const t={};return i.integrity&&(t.integrity=i.integrity),i.referrerPolicy&&(t.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?t.credentials="include":i.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function s(i){if(i.ep)return;i.ep=!0;const t=e(i);fetch(i.href,t)}})();
